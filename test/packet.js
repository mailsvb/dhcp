
const assert = require('assert');
const { Packet } = require ('../src/index.js');

// TODO: add decline
const vectors = [
    {
        name: "discover",
        hex: "01010600d97aba5d000000000000000000000000000000000000000054a050e7dfd700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000638253633501013d070154a050e7dfd70c084b6972696c6c50433c084d53465420352e30370d0103060f1f212b2c2e2f79f9fcff",
        type: 1,
    },
    {
        name: "offer",
        hex: "02010600e8711e710000000000000000c0a8010ac0a801010000000054a050e7dfd700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000638253633501020104ffffff000304c0a801010604c0a801013304000151803604c0a80101ff",
        type: 2,
    },
    {
        name: "request",
        hex: "0101060074c6d3c9000000000000000000000000000000000000000054a050e7dfd700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000638253633501033d070154a050e7dfd73204ac1102833604ac1102030c084b6972696c6c5043510b0000004b6972696c6c50433c084d53465420352e30370d0103060f1f212b2c2e2f79f9fcff",
        type: 3,
    },
    {
        name: "decline",
        hex: "010106000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000063825363350104ff",
        type: 4,
    },
    {
        name: "ack",
        hex: "02010600e8711e710000000000000000c0a8010ac0a801010000000054a050e7dfd700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000638253633501050104ffffff000304c0a801010604c0a801013604c0a80101ff",
        type: 5,
    },
    {
        name: "nak",
        hex: "02010600f5d8f16c0000800000000000000000000000000000000000205476de145600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000638253633501063604ac110203ff",
        type: 6,
    },
    {
        name: "release",
        hex: "01010600858d383800000000ac11028300000000000000000000000054a050e7dfd700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000638253633501073604ac1102033d070154a050e7dfd7ff",
        type: 7,
    },
    {
        name: "inform",
        hex: "01010600c311435d00000000ac110220000000000000000000000000485b3902a59d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000638253633501083d0701485b3902a59d0c064379626f72673c084d53465420352e30370d010f03062c2e2f1f2179f92bfcff",
        type: 8,
    },
];

describe("Packet", () => {

    vectors.forEach((vector) => {
        it(vector.name, () => {
            const packet = Packet.fromBuffer(Buffer.from(vector.hex, "hex"));
            assert.equal(packet.type, vector.type);
        });
        it(vector.name + " find", () => {
            const packet = Packet.fromBuffer(Buffer.from(vector.hex, "hex"));
            const hostName = packet.find(12);
        });

        it(vector.name + " from buffer to string", () => {
            const packet = Packet.fromBuffer(Buffer.from(vector.hex, "hex"));
            const toBuffer = packet.toBuffer();
            assert.equal(toBuffer.toString("hex"), vector.hex);
        });
    });

    context("one time check up", () => {

        it("empty type", () => {
            const packet = new Packet();
            assert.equal(packet.type, 0);
        });

        it("toBuffer options without end", () => {
            const packet = Packet.fromBuffer(Buffer.from(vectors[0].hex, "hex"));
            packet.options.pop();
        });

        it("toString branch UNKNOWN", () => {
            const packet = Packet.fromBuffer(Buffer.from(vectors[0].hex, "hex"));
            packet.options.shift();
            packet.toBuffer();
        });
    });

});
